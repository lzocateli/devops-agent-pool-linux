parameters:
  - name: imageName
    displayName: "Name the image to be created, example: nuuvedevops/azdo-agents"
    type: string
    default: ""
  - name: imageVersion
    displayName: "Tag version for the image, example: linux-x64-1.0.0"
    type: string
    default: ""
  - name: DockerFilePath
    displayName: "Dockerfile path, example: base-image/linux"
    type: string
    default: ""
  - name: imageArguments
    displayName: "Image arguments, example: --build-arg Env_HttpProxy=proxy.mydomain.com:80"
    type: string
    default: " "
  - name: proxyBypassConfig
    displayName: "Array bypass example: yourdns\\.com, github\\.com"
    type: string
    default: " "
  - name: executeInstallAgent
    displayName: "Execute script to Install Agent ?"
    type: boolean
    default: false
  - name: agetTargetArch
    displayName: "Target arch agent"
    type: string
    default: linux-x64
    values:
      - linux-x64
      - linux-arm64
      - linux-arm
      - rhel.6-x64

trigger: none

stages:
  - stage: "CreateImage"
    displayName: "Create Conteiner Image"

    jobs:
      - job: "BuildImage"
        displayName: "Build Image"

        pool:
          vmimage: ubuntu-latest

        variables:
          - group: "Project-Variables"

        steps:
          - checkout: self
            displayName: "Git clone self reposytory"

          - ${{ if ne(startsWith(parameters.proxyBypassConfig, ' '), true) }}:
              - task: PowerShell@2
                displayName: "Create proxybypass"
                enabled: true
                inputs:
                  targetType: "inline"
                  script: |
                    Set-Location "${{ parameters.DockerFilePath }}/"

                    $arrayByPass = "${{ parameters.proxyBypassConfig }}" -split ","

                    foreach ($item in $arrayByPass) {
                      Write-Host "Include proxy bypass item: $PWD $item"
                      Write-Output $item.Trim() >>.proxybypass
                    }
                  errorActionPreference: stop
                  ignoreLASTEXITCODE: false

          - ${{ if eq(parameters.executeInstallAgent, true) }}:
              - task: PowerShell@2
                displayName: "Download agent"
                enabled: true
                inputs:
                  targetType: "inline"
                  script: |
                    if ([string]::IsNullOrWhiteSpace("${{ parameters.agetTargetArch }}")) {
                      Write-Host "agetTargetArch Can not be null"
                      Exit 1
                    }

                    Set-Location "${{ parameters.DockerFilePath }}"
                    ls -la

                    ./install-agent.ps1 -pathAgent $PWD -targetArchPlataform ${{ parameters.agetTargetArch }} -urlYourDevOps $(System.CollectionUri) -patYourDevOps $(PatDevOps)
                  errorActionPreference: stop
                  ignoreLASTEXITCODE: false

          - task: Docker@2
            displayName: "Docker Build"
            enabled: true
            inputs:
              containerRegistry: "SharedKernel-Container-DockerHub"
              repository: "${{ parameters.imageName }}"
              command: "build"
              Dockerfile: "${{ parameters.DockerFilePath }}/Dockerfile"
              tags: "${{ parameters.imageVersion }}"
              arguments: "${{ parameters.imageArguments }}"

          - task: Docker@2
            displayName: "Docker Push"
            enabled: true
            inputs:
              containerRegistry: "SharedKernel-Container-DockerHub"
              repository: "${{ parameters.imageName }}"
              command: "push"
              tags: "${{ parameters.imageVersion }}"
